/* This is auto-generated code. Edit at your own peril. */
#include "testing/testing.h"

#ifndef TESTING_HEADER_INCLUDED
#define TESTING_HEADER_INCLUDED

void testing__test__attribute_equal_zero_len_null_ptr(int *__unused, gconstpointer __data);
void testing__test__attribute_consume(int *__unused, gconstpointer __data);
void testing__test__attribute_consumed(int *__unused, gconstpointer __data);
void testing__test__attribute_set_data(int *__unused, gconstpointer __data);
void testing__test__attribute_set_data_short(int *__unused, gconstpointer __data);
void testing__test__attribute_set_data_length(int *__unused, gconstpointer __data);
void testing__test__attribute_set_empty(int *__unused, gconstpointer __data);
void testing__test__attribute_get_bool(int *__unused, gconstpointer __data);
void testing__test__attribute_get_bool_invalid(int *__unused, gconstpointer __data);
void testing__test__attribute_set_time(int *__unused, gconstpointer __data);
void testing__test__attribute_set_time_empty(int *__unused, gconstpointer __data);
void testing__test__attribute_set_time_length(int *__unused, gconstpointer __data);
void testing__test__attribute_get_time(int *__unused, gconstpointer __data);
void testing__test__attribute_get_time_empty(int *__unused, gconstpointer __data);
void testing__test__attribute_get_time_invalid(int *__unused, gconstpointer __data);
void testing__test__attribute_get_time_invalid_length(int *__unused, gconstpointer __data);
void testing__test__attribute_get_string(int *__unused, gconstpointer __data);
void testing__test__attribute_get_string_null(int *__unused, gconstpointer __data);
void testing__test__attribute_get_string_not_utf8(int *__unused, gconstpointer __data);
void testing__test__attribute_get_string_bad_pointer(int *__unused, gconstpointer __data);
void testing__test__attribute_set_bool(int *__unused, gconstpointer __data);
void testing__test__attribute_set_bool_short(int *__unused, gconstpointer __data);
void testing__test__attribute_set_bool_length(int *__unused, gconstpointer __data);
void testing__test__attribute_set_ulong(int *__unused, gconstpointer __data);
void testing__test__attribute_set_ulong_short(int *__unused, gconstpointer __data);
void testing__test__attribute_set_ulong_length(int *__unused, gconstpointer __data);
void testing__test__attribute_set_string(int *__unused, gconstpointer __data);
void testing__test__attribute_set_string_null(int *__unused, gconstpointer __data);
void testing__test__attribute_set_string_short(int *__unused, gconstpointer __data);
void testing__test__attribute_set_string_length(int *__unused, gconstpointer __data);
void testing__test__attribute_set_date(int *__unused, gconstpointer __data);
void testing__test__attribute_set_date_none(int *__unused, gconstpointer __data);
void testing__test__attribute_set_date_short(int *__unused, gconstpointer __data);
void testing__test__attribute_set_date_length(int *__unused, gconstpointer __data);
void testing__test__attribute_set_mpi(int *__unused, gconstpointer __data);
void testing__test__attribute_set_mpi_short(int *__unused, gconstpointer __data);
void testing__test__attribute_set_mpi_length(int *__unused, gconstpointer __data);
void testing__test__attribute_equal(int *__unused, gconstpointer __data);
void testing__test__attribute_equal_same(int *__unused, gconstpointer __data);
void testing__test__attribute_equal_same_pointer(int *__unused, gconstpointer __data);
void testing__test__attribute_equal_diff_types(int *__unused, gconstpointer __data);
void testing__test__attribute_equal_diff_length(int *__unused, gconstpointer __data);
void testing__test__attribute_equal_diff_value(int *__unused, gconstpointer __data);
void testing__test__attribute_hash(int *__unused, gconstpointer __data);
void testing__test__attribute_contains(int *__unused, gconstpointer __data);
void testing__test__attribute_contains_no_value(int *__unused, gconstpointer __data);
void testing__test__attribute_contains_no_type(int *__unused, gconstpointer __data);
void testing__test__attributes_find(int *__unused, gconstpointer __data);
void testing__test__attributes_find_not_found(int *__unused, gconstpointer __data);
void testing__test__attribute_find_boolean(int *__unused, gconstpointer __data);
void testing__test__attribute_find_boolean_no_type(int *__unused, gconstpointer __data);
void testing__test__attribute_find_boolean_not_bbool(int *__unused, gconstpointer __data);
void testing__test__attribute_find_ulong(int *__unused, gconstpointer __data);
void testing__test__attribute_find_ulong_no_type(int *__unused, gconstpointer __data);
void testing__test__attribute_find_ulong_not_ulong(int *__unused, gconstpointer __data);
void testing__test__attribute_find_mpi(int *__unused, gconstpointer __data);
void testing__test__attribute_find_mpi_no_type(int *__unused, gconstpointer __data);
void testing__test__attributes_consume(int *__unused, gconstpointer __data);
void testing__test__template_new_free(int *__unused, gconstpointer __data);
void testing__test__template_find(int *__unused, gconstpointer __data);
void testing__test__template_set_replace(int *__unused, gconstpointer __data);
void testing__setup__crypto_setup(int *__unused, gconstpointer __data);
void testing__teardown__crypto_setup(int *__unused, gconstpointer __data);
void testing__test__parse_key(int *__unused, gconstpointer __data);
void testing__test__sexp_key_to_public(int *__unused, gconstpointer __data);
void testing__setup__asn1_tree(int *__unused, gconstpointer __data);
void testing__teardown__asn1_tree(int *__unused, gconstpointer __data);
void testing__test__asn1_integers(int *__unused, gconstpointer __data);
void testing__setup__preload(int *__unused, gconstpointer __data);
void testing__teardown__preload(int *__unused, gconstpointer __data);
void testing__test__der_rsa_public(int *__unused, gconstpointer __data);
void testing__test__der_dsa_public(int *__unused, gconstpointer __data);
void testing__test__der_rsa_private(int *__unused, gconstpointer __data);
void testing__test__der_dsa_private(int *__unused, gconstpointer __data);
void testing__test__der_dsa_private_parts(int *__unused, gconstpointer __data);
void testing__test__read_public_key_info(int *__unused, gconstpointer __data);
void testing__test__read_certificate(int *__unused, gconstpointer __data);
void testing__test__write_certificate(int *__unused, gconstpointer __data);
void testing__test__read_ca_certificates_public_key_info(int *__unused, gconstpointer __data);
void testing__test__read_basic_constraints(int *__unused, gconstpointer __data);
void testing__test__read_key_usage(int *__unused, gconstpointer __data);
void testing__test__read_enhanced_usage(int *__unused, gconstpointer __data);
void testing__test__read_all_pkcs8(int *__unused, gconstpointer __data);
void testing__test__read_pkcs8_bad_password(int *__unused, gconstpointer __data);
void testing__test__write_pkcs8_plain(int *__unused, gconstpointer __data);
void testing__test__write_pkcs8_encrypted(int *__unused, gconstpointer __data);
void testing__setup__object_setup(int *__unused, gconstpointer __data);
void testing__teardown__object_teardown(int *__unused, gconstpointer __data);
void testing__test__object_create_destroy_transient(int *__unused, gconstpointer __data);
void testing__test__object_transient_transacted_fail(int *__unused, gconstpointer __data);
void testing__test__object_create_transient_bad_value(int *__unused, gconstpointer __data);
void testing__test__object_create_auto_destruct(int *__unused, gconstpointer __data);
void testing__test__object_create_auto_destruct_not_transient(int *__unused, gconstpointer __data);
void testing__test__object_expose(int *__unused, gconstpointer __data);
void testing__test__object_expose_transaction(int *__unused, gconstpointer __data);
void testing__setup__credential_setup(int *__unused, gconstpointer __data);
void testing__teardown__credential_teardown(int *__unused, gconstpointer __data);
void testing__test__credential_create(int *__unused, gconstpointer __data);
void testing__test__credential_create_missing_pin(int *__unused, gconstpointer __data);
void testing__test__credential_create_no_object(int *__unused, gconstpointer __data);
void testing__test__credential_create_invalid_object(int *__unused, gconstpointer __data);
void testing__test__credential_get_attributes(int *__unused, gconstpointer __data);
void testing__test__credential_object_property(int *__unused, gconstpointer __data);
void testing__test__credential_login_property(int *__unused, gconstpointer __data);
void testing__test__credential_data(int *__unused, gconstpointer __data);
void testing__test__credential_connect_object(int *__unused, gconstpointer __data);
void testing__setup__timer_setup(int *__unused, gconstpointer __data);
void testing__teardown__timer_teardown(int *__unused, gconstpointer __data);
void testing__test__timer_extra_initialize(int *__unused, gconstpointer __data);
void testing__test__timer_simple(int *__unused, gconstpointer __data);
void testing__test__timer_cancel(int *__unused, gconstpointer __data);
void testing__test__timer_immediate(int *__unused, gconstpointer __data);
void testing__test__timer_multiple(int *__unused, gconstpointer __data);
void testing__test__timer_outstanding(int *__unused, gconstpointer __data);
void testing__setup__transaction_setup(int *__unused, gconstpointer __data);
void testing__test__transaction_empty(int *__unused, gconstpointer __data);
void testing__test__transaction_fail(int *__unused, gconstpointer __data);
void testing__test__transaction_signals_success(int *__unused, gconstpointer __data);
void testing__test__transaction_signals_failure(int *__unused, gconstpointer __data);
void testing__test__transaction_order_is_reverse(int *__unused, gconstpointer __data);
void testing__test__transaction_dispose_completes(int *__unused, gconstpointer __data);
void testing__test__remove_file_success(int *__unused, gconstpointer __data);
void testing__test__remove_file_abort(int *__unused, gconstpointer __data);
void testing__test__remove_file_non_exist(int *__unused, gconstpointer __data);
void testing__test__write_file(int *__unused, gconstpointer __data);
void testing__test__write_file_abort_gone(int *__unused, gconstpointer __data);
void testing__test__write_file_abort_revert(int *__unused, gconstpointer __data);
void testing__test__unique_file_conflict(int *__unused, gconstpointer __data);
void testing__test__unique_file_conflict_with_ext(int *__unused, gconstpointer __data);
void testing__test__unique_file_no_conflict(int *__unused, gconstpointer __data);
void testing__setup__store(int *__unused, gconstpointer __data);
void testing__teardown__store(int *__unused, gconstpointer __data);
void testing__test__store_schema(int *__unused, gconstpointer __data);
void testing__test__store_schema_flags(int *__unused, gconstpointer __data);
void testing__setup__memory_store(int *__unused, gconstpointer __data);
void testing__teardown__memory_store(int *__unused, gconstpointer __data);
void testing__test__get_attribute_default(int *__unused, gconstpointer __data);
void testing__test__read_value_default(int *__unused, gconstpointer __data);
void testing__test__read_string(int *__unused, gconstpointer __data);
void testing__test__get_invalid(int *__unused, gconstpointer __data);
void testing__test__get_sensitive(int *__unused, gconstpointer __data);
void testing__test__get_internal(int *__unused, gconstpointer __data);
void testing__test__set_invalid(int *__unused, gconstpointer __data);
void testing__test__set_internal(int *__unused, gconstpointer __data);
void testing__test__set_get_attribute(int *__unused, gconstpointer __data);
void testing__test__write_read_value(int *__unused, gconstpointer __data);
void testing__test__set_no_validate(int *__unused, gconstpointer __data);
void testing__test__set_transaction_default(int *__unused, gconstpointer __data);
void testing__test__set_transaction_revert_first(int *__unused, gconstpointer __data);
void testing__test__set_notifies(int *__unused, gconstpointer __data);
void testing__test__set_object_gone_first(int *__unused, gconstpointer __data);
void testing__test__test_secret(int *__unused, gconstpointer __data);
void testing__test__test_secret_from_login(int *__unused, gconstpointer __data);
void testing__test__test_null_terminated(int *__unused, gconstpointer __data);
void testing__test__test_always_has_null(int *__unused, gconstpointer __data);
void testing__test__test_null(int *__unused, gconstpointer __data);
void testing__test__test_empty(int *__unused, gconstpointer __data);
void testing__test__test_equal(int *__unused, gconstpointer __data);
void testing__setup__tracker(int *__unused, gconstpointer __data);
void testing__teardown__tracker(int *__unused, gconstpointer __data);
void testing__test__file_watch(int *__unused, gconstpointer __data);
void testing__test__watch_file(int *__unused, gconstpointer __data);
void testing__test__nomatch(int *__unused, gconstpointer __data);

#endif /* TESTING_HEADER_INCLUDED */

