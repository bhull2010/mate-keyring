/* This is auto-generated code. Edit at your own peril. */
#include "testing/testing.h"

#ifndef TESTING_HEADER_INCLUDED
#define TESTING_HEADER_INCLUDED

void testing__test__access_free(int *__unused, gconstpointer __data);
void testing__test__acl_free(int *__unused, gconstpointer __data);
void testing__test__parse_item_type(int *__unused, gconstpointer __data);
void testing__test__format_item_type(int *__unused, gconstpointer __data);
void testing__test__fields_new(int *__unused, gconstpointer __data);
void testing__test__fields_boxed(int *__unused, gconstpointer __data);
void testing__test__fields_add_get_values(int *__unused, gconstpointer __data);
void testing__test__fields_parse(int *__unused, gconstpointer __data);
void testing__test__fields_parse_empty(int *__unused, gconstpointer __data);
void testing__test__fields_parse_null_invalid(int *__unused, gconstpointer __data);
void testing__test__fields_parse_missing_value(int *__unused, gconstpointer __data);
void testing__test__fields_parse_missing_terminator(int *__unused, gconstpointer __data);
void testing__test__fields_parse_not_utf8(int *__unused, gconstpointer __data);
void testing__test__fields_serialize(int *__unused, gconstpointer __data);
void testing__test__fields_serialize_length(int *__unused, gconstpointer __data);
void testing__test__fields_add_get_compat_uint32(int *__unused, gconstpointer __data);
void testing__test__fields_get_compat_uint32_fail(int *__unused, gconstpointer __data);
void testing__test__fields_get_compat_hashed_string(int *__unused, gconstpointer __data);
void testing__test__fields_get_compat_hashed_already(int *__unused, gconstpointer __data);
void testing__test__fields_get_compat_hashed_uint32(int *__unused, gconstpointer __data);
void testing__test__fields_get_compat_hashed_uint32_already(int *__unused, gconstpointer __data);
void testing__test__fields_get_names(int *__unused, gconstpointer __data);
void testing__test__fields_match(int *__unused, gconstpointer __data);
void testing__test__fields_match_mismatch_value(int *__unused, gconstpointer __data);
void testing__test__fields_match_mismatch_field(int *__unused, gconstpointer __data);
void testing__test__fields_match_wrong_hashed(int *__unused, gconstpointer __data);
void testing__test__secret_data_new(int *__unused, gconstpointer __data);
void testing__test__secret_data_get_set(int *__unused, gconstpointer __data);
void testing__test__secret_data_get_raw(int *__unused, gconstpointer __data);
void testing__test__secret_data_remove(int *__unused, gconstpointer __data);
void testing__test__secret_data_set_transacted(int *__unused, gconstpointer __data);
void testing__test__secret_data_set_transacted_replace(int *__unused, gconstpointer __data);
void testing__test__secret_data_set_transacted_fail(int *__unused, gconstpointer __data);
void testing__test__secret_data_set_transacted_fail_revert(int *__unused, gconstpointer __data);
void testing__test__secret_data_get_set_master(int *__unused, gconstpointer __data);
void testing__setup__secret_object(int *__unused, gconstpointer __data);
void testing__teardown__secret_object(int *__unused, gconstpointer __data);
void testing__test__secret_object_is_locked(int *__unused, gconstpointer __data);
void testing__test__secret_object_identifier_prop(int *__unused, gconstpointer __data);
void testing__test__secret_object_created_prop(int *__unused, gconstpointer __data);
void testing__test__secret_object_modified_prop(int *__unused, gconstpointer __data);
void testing__test__secret_object_was_modified(int *__unused, gconstpointer __data);
void testing__test__secret_object_label_prop(int *__unused, gconstpointer __data);
void testing__test__secret_object_identifier_get_attr(int *__unused, gconstpointer __data);
void testing__test__secret_object_label_get_attr(int *__unused, gconstpointer __data);
void testing__test__secret_object_label_set_attr(int *__unused, gconstpointer __data);
void testing__test__secret_object_label_set_attr_fail(int *__unused, gconstpointer __data);
void testing__test__secret_object_modified_get_attr(int *__unused, gconstpointer __data);
void testing__test__secret_object_created_get_attr(int *__unused, gconstpointer __data);
void testing__test__secret_object_locked_get_attr(int *__unused, gconstpointer __data);
void testing__setup__secret_collection(int *__unused, gconstpointer __data);
void testing__teardown__secret_collection(int *__unused, gconstpointer __data);
void testing__test__secret_collection_is_locked(int *__unused, gconstpointer __data);
void testing__test__secret_collection_unlocked_data(int *__unused, gconstpointer __data);
void testing__test__secret_collection_get_filename(int *__unused, gconstpointer __data);
void testing__test__secret_collection_set_filename(int *__unused, gconstpointer __data);
void testing__test__secret_collection_has_item(int *__unused, gconstpointer __data);
void testing__test__secret_collection_load_unlock_plain(int *__unused, gconstpointer __data);
void testing__test__secret_collection_load_unlock_encrypted(int *__unused, gconstpointer __data);
void testing__test__secret_collection_load_unlock_bad_password(int *__unused, gconstpointer __data);
void testing__test__secret_collection_unlock_without_load(int *__unused, gconstpointer __data);
void testing__test__secret_collection_twice_unlock(int *__unused, gconstpointer __data);
void testing__test__secret_collection_twice_unlock_bad_password(int *__unused, gconstpointer __data);
void testing__test__secret_collection_memory_unlock(int *__unused, gconstpointer __data);
void testing__test__secret_collection_memory_unlock_bad_password(int *__unused, gconstpointer __data);
void testing__test__secret_collection_factory(int *__unused, gconstpointer __data);
void testing__test__secret_collection_factory_unnamed(int *__unused, gconstpointer __data);
void testing__test__secret_collection_factory_token(int *__unused, gconstpointer __data);
void testing__test__secret_collection_factory_duplicate(int *__unused, gconstpointer __data);
void testing__test__secret_collection_factory_item(int *__unused, gconstpointer __data);
void testing__test__secret_collection_token_remove(int *__unused, gconstpointer __data);
void testing__test__secret_collection_token_item_remove(int *__unused, gconstpointer __data);
void testing__setup__secret_item(int *__unused, gconstpointer __data);
void testing__teardown__secret_item(int *__unused, gconstpointer __data);
void testing__test__secret_item_new(int *__unused, gconstpointer __data);
void testing__test__secret_item_create(int *__unused, gconstpointer __data);
void testing__test__secret_item_create_failed(int *__unused, gconstpointer __data);
void testing__test__secret_item_destroy(int *__unused, gconstpointer __data);
void testing__test__secret_item_destroy_failed(int *__unused, gconstpointer __data);
void testing__test__secret_item_collection_get(int *__unused, gconstpointer __data);
void testing__test__secret_item_collection_items(int *__unused, gconstpointer __data);
void testing__test__secret_item_collection_remove(int *__unused, gconstpointer __data);
void testing__test__secret_item_is_locked(int *__unused, gconstpointer __data);
void testing__test__secret_item_get_collection(int *__unused, gconstpointer __data);
void testing__test__secret_item_tracks_collection(int *__unused, gconstpointer __data);
void testing__test__secret_item_get_set_fields(int *__unused, gconstpointer __data);
void testing__test__secret_item_collection_attr(int *__unused, gconstpointer __data);
void testing__test__secret_item_secret_attr(int *__unused, gconstpointer __data);
void testing__test__secret_item_secret_attr_locked(int *__unused, gconstpointer __data);
void testing__test__secret_item_fields_attr(int *__unused, gconstpointer __data);
void testing__test__secret_item_fields_attr_locked(int *__unused, gconstpointer __data);
void testing__test__secret_item_fields_attr_reverts(int *__unused, gconstpointer __data);
void testing__setup__secret_search(int *__unused, gconstpointer __data);
void testing__teardown__secret_search(int *__unused, gconstpointer __data);
void testing__test__create_search_incomplete(int *__unused, gconstpointer __data);
void testing__test__create_search_bad_fields(int *__unused, gconstpointer __data);
void testing__test__create_search(int *__unused, gconstpointer __data);
void testing__test__create_search_and_match(int *__unused, gconstpointer __data);
void testing__test__create_search_and_change_to_match(int *__unused, gconstpointer __data);
void testing__test__create_search_and_change_to_not_match(int *__unused, gconstpointer __data);
void testing__test__create_search_for_bad_collection(int *__unused, gconstpointer __data);
void testing__test__create_search_for_collection(int *__unused, gconstpointer __data);
void testing__test__create_search_for_collection_no_match(int *__unused, gconstpointer __data);
void testing__setup__textual(int *__unused, gconstpointer __data);
void testing__teardown__textual(int *__unused, gconstpointer __data);
void testing__test__textual_read(int *__unused, gconstpointer __data);
void testing__test__textual_read_wrong_format(int *__unused, gconstpointer __data);
void testing__test__textual_read_bad_number(int *__unused, gconstpointer __data);
void testing__test__textual_write(int *__unused, gconstpointer __data);
void testing__test__textual_remove_unavailable(int *__unused, gconstpointer __data);
void testing__setup__binary(int *__unused, gconstpointer __data);
void testing__teardown__binary(int *__unused, gconstpointer __data);
void testing__test__binary_read(int *__unused, gconstpointer __data);
void testing__test__binary_read_wrong_format(int *__unused, gconstpointer __data);
void testing__test__binary_read_wrong_master(int *__unused, gconstpointer __data);
void testing__test__binary_read_sdata_but_no_master(int *__unused, gconstpointer __data);
void testing__test__binary_write(int *__unused, gconstpointer __data);
void testing__test__binary_remove_unavailable(int *__unused, gconstpointer __data);

#endif /* TESTING_HEADER_INCLUDED */

